import numpy as np
from collections import Counter
def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1 - x2) ** 2))
class KNN:
    def __init__(self, k=3):
        self.k = k
    def fit(self, X, y):
        self.X_train = X
        self.y_train = y
    def predict(self, X):
        predictions = [self._predict(x) for x in X]
        return np.array(predictions)
    def _predict(self, x):
        distances = [euclidean_distance(x, x_train) for x_train in self.X_train]
        k_indices = np.argsort(distances)[:self.k]
        k_nearest_labels = [self.y_train[i] for i in k_indices]
        most_common = Counter(k_nearest_labels).most_common(1)
        return most_common[0][0]
X_train = np.array([
    [1.0, 2.1],
    [1.5, 1.8],
    [5.0, 8.0],
    [6.0, 9.0],
    [1.0, 0.6],
    [9.0, 11.0]
])
y_train = np.array(['A', 'A', 'B', 'B', 'A', 'B'])
X_test = np.array([[2.0, 3.0]])
knn = KNN(k=3)
knn.fit(X_train, y_train)
prediction = knn.predict(X_test)
print("Test sample:", X_test[0])
print("Predicted class:", prediction[0])
