import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
np.random.seed(42)
x = np.random.rand(100, 1) * 10 
y = 2 * x**2 + 3 * x + 4 + np.random.randn(100, 1) * 10  
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
linear_model = LinearRegression()
linear_model.fit(x_train, y_train)
y_pred_linear = linear_model.predict(x_test)
poly = PolynomialFeatures(degree=2)
x_poly_train = poly.fit_transform(x_train)
x_poly_test = poly.transform(x_test)
poly_model = LinearRegression()
poly_model.fit(x_poly_train, y_train)
y_pred_poly = poly_model.predict(x_poly_test)
print("Linear Regression:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred_linear):.2f}")
print(f"R² Score: {r2_score(y_test, y_pred_linear):.2f}\n")
print("Polynomial Regression:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred_poly):.2f}")
print(f"R² Score: {r2_score(y_test, y_pred_poly):.2f}\n")
plt.figure(figsize=(10, 6))
plt.subplot(1, 2, 1)
plt.scatter(x_test, y_test, color='blue', label='Actual data')
plt.plot(x_test, y_pred_linear, color='red', linewidth=2, label='Linear Regression')
plt.title("Linear Regression")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.subplot(1, 2, 2)
plt.scatter(x_test, y_test, color='blue', label='Actual data')
plt.plot(np.sort(x_test[:, 0]), poly_model.predict(poly.transform(np.sort(x_test, axis=0))), color='red', linewidth=2, label='Polynomial Regression')
plt.title("Polynomial Regression")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.tight_layout()
plt.show()
